generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account?
  sessions      Session[]
  bookings      Booking[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  role         String?
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Field {
  id          String    @id @default(cuid())
  name        String    
  description String?
  price       Float
  weekendPrice Float?
  type        String
  startDate   DateTime?  
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

model Booking {
  id         String        @id @default(cuid())
  fieldId    String
  userId     String?
  startTime  DateTime
  endTime    DateTime
  email      String
  phoneNumber String
  clubName    String
  fileUrl     String?
  status     BookingStatus @default(PENDING)
  totalPrice Float
  wasitPrice Float?
  photographerPrice Float?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  field      Field         @relation(fields: [fieldId], references: [id])
  user       User?          @relation(fields: [userId], references: [id])
  @@index([userId])
  @@index([fieldId])
}

enum BookingStatus {
  PENDING
  REJECTED
  COMPLETED
  CANCELLED
}
